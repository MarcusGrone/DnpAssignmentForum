@using ApiContracts.DTO_Comment
@using BlazorApp.Services.CommentService
@using BlazorApp.Services.UserService
@inject ICommentService CommentService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthProvider

<div class="comment-section">
    <h5>Comments</h5>

    <ul class="list-group mb-3">
        @if (commentsWithUsernames.Any())
        {
            @foreach (var comment in commentsWithUsernames)
            {
                <li class="list-group-item">
                    <strong>@comment.UserName:</strong> @comment.Comment.Body
                </li>
            }
        }
        else
        {
            <li class="list-group-item">No comments yet. Be the first to comment!</li>
        }
    </ul>

    <h6>Add a Comment</h6>
    <EditForm Model="newComment">
        <div class="mb-3">
            <textarea @bind="newComment.Body" class="form-control" placeholder="Write your comment..."></textarea>
        </div>
        <button class="btn btn-primary" @onclick="AddComment">Submit Comment</button>
    </EditForm>
</div>

@code {
    [Parameter] public int PostId { get; set; }

    private List<(CommentDto Comment, string UserName)> commentsWithUsernames = new();
    private CreateCommentDto newComment = new() { Body = string.Empty };

    protected override async Task OnParametersSetAsync()
    {
        if (PostId != 0)
        {
            await LoadCommentsWithUsernames();
        }
    }

    private async Task LoadCommentsWithUsernames()
    {
        try
        {
            Console.WriteLine($"Attempting to load comments for PostId: {PostId}");
            var comments = await CommentService.GetCommentsForPostAsync(PostId);
            commentsWithUsernames.Clear();

            foreach (var comment in comments)
            {
                var user = await UserService.GetSingleUserAsync(comment.AuthorId);
                commentsWithUsernames.Add((comment, user.UserName));
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading comments: {ex.Message}");
        }
    }

    private async Task AddComment()
    {
        if (!string.IsNullOrWhiteSpace(newComment.Body))
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst("Id");

            if (userIdClaim != null)
            {
                newComment.AuthorId = int.Parse(userIdClaim.Value);
                newComment.PostId = PostId;

                try
                {
                    await CommentService.CreateCommentAsync(PostId, newComment);
                    newComment.Body = string.Empty;
                    await LoadCommentsWithUsernames();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error adding comment: {ex.Message}");
                }
            }
        }
    }
}
