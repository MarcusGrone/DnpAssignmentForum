@using ApiContracts.DTO_Comment
@using BlazorApp.Services.CommentService
@inject ICommentService CommentService

<div class="comment-section">
    <h5>Comments</h5>
     
    <ul class="list-group mb-3">
        @if (comments != null && comments.Any())
        {
            @foreach (var comment in comments)
            {
                <li class="list-group-item">
                    <strong>User @comment.AuthorId:</strong> @comment.Body
                </li>
            }
        }
        else if (comments != null)
        {
            <li class="list-group-item">No comments yet. Be the first to comment!</li>
        }
        else
        {
            <li class="list-group-item text-danger">Error loading comments. Comments list is null.</li>
        }
    </ul>

    <h6>Add a Comment</h6>
  <EditForm Model="newComment">
    <div class="mb-3">
        <textarea @bind="newComment.Body" class="form-control" placeholder="Write your comment..."></textarea>
    </div>
    <button class="btn btn-primary" @onclick="AddComment">Submit Comment</button>
    </EditForm>
</div>

@code {
    [Parameter] public int PostId { get; set; }

    private List<CommentDto> comments = new List<CommentDto>();
    private CreateCommentDto newComment = new CreateCommentDto
    {
        Body = string.Empty,
        AuthorId = 1 
    };

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"OnParametersSetAsync called with PostId: {PostId}");

        if (PostId != 0)
        {
            await LoadComments();
        }
        else
        {
            Console.WriteLine("PostId is 0 or not set. Skipping LoadComments.");
        }
    }

    private async Task LoadComments()
    {
        try
        {
            Console.WriteLine($"Loading comments for PostId: {PostId}");
            comments.Clear(); 
            comments = await CommentService.GetCommentsForPostAsync(PostId);

            if (comments == null)
            {
                Console.WriteLine("Comments list is null.");
            }
            else if (!comments.Any())
            {
                Console.WriteLine("Comments list is empty.");
            }
            else
            {
                Console.WriteLine($"Comments loaded: {comments.Count}");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading comments: {ex.Message}");
        }
    }

    private async Task AddComment()
    {
        if (!string.IsNullOrWhiteSpace(newComment.Body))
        {
            try
            {
                Console.WriteLine($"Adding comment to PostId: {PostId}");
                await CommentService.CreateCommentAsync(PostId, newComment);
                newComment.Body = string.Empty;
                await LoadComments(); 
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding comment: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Comment body is empty. Skipping AddComment.");
        }
    }
}
